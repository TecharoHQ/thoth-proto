// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: techaro/thoth/reputation/v1/reputation.proto

package reputationv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/TecharoHQ/thoth-proto/gen/techaro/thoth/iptoasn/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IPList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	WeightMod     int32                  `protobuf:"varint,3,opt,name=weight_mod,json=weightMod,proto3" json:"weight_mod,omitempty"`
	Comment       string                 `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPList) Reset() {
	*x = IPList{}
	mi := &file_techaro_thoth_reputation_v1_reputation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPList) ProtoMessage() {}

func (x *IPList) ProtoReflect() protoreflect.Message {
	mi := &file_techaro_thoth_reputation_v1_reputation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPList.ProtoReflect.Descriptor instead.
func (*IPList) Descriptor() ([]byte, []int) {
	return file_techaro_thoth_reputation_v1_reputation_proto_rawDescGZIP(), []int{0}
}

func (x *IPList) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IPList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IPList) GetWeightMod() int32 {
	if x != nil {
		return x.WeightMod
	}
	return 0
}

func (x *IPList) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type ReputeServiceQueryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IpAddress     string                 `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Fingerprints  map[string]string      `protobuf:"bytes,2,rep,name=fingerprints,proto3" json:"fingerprints,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UserAgent     string                 `protobuf:"bytes,3,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReputeServiceQueryRequest) Reset() {
	*x = ReputeServiceQueryRequest{}
	mi := &file_techaro_thoth_reputation_v1_reputation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReputeServiceQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReputeServiceQueryRequest) ProtoMessage() {}

func (x *ReputeServiceQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_techaro_thoth_reputation_v1_reputation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReputeServiceQueryRequest.ProtoReflect.Descriptor instead.
func (*ReputeServiceQueryRequest) Descriptor() ([]byte, []int) {
	return file_techaro_thoth_reputation_v1_reputation_proto_rawDescGZIP(), []int{1}
}

func (x *ReputeServiceQueryRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ReputeServiceQueryRequest) GetFingerprints() map[string]string {
	if x != nil {
		return x.Fingerprints
	}
	return nil
}

func (x *ReputeServiceQueryRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

type ReputeServiceQueryResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	HasMatch           bool                   `protobuf:"varint,1,opt,name=has_match,json=hasMatch,proto3" json:"has_match,omitempty"`
	IpLists            []*IPList              `protobuf:"bytes,2,rep,name=ip_lists,json=ipLists,proto3" json:"ip_lists,omitempty"`
	SuggestedChallenge string                 `protobuf:"bytes,3,opt,name=suggested_challenge,json=suggestedChallenge,proto3" json:"suggested_challenge,omitempty"`
	AsnInfo            *v1.LookupResponse     `protobuf:"bytes,4,opt,name=asn_info,json=asnInfo,proto3" json:"asn_info,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ReputeServiceQueryResponse) Reset() {
	*x = ReputeServiceQueryResponse{}
	mi := &file_techaro_thoth_reputation_v1_reputation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReputeServiceQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReputeServiceQueryResponse) ProtoMessage() {}

func (x *ReputeServiceQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_techaro_thoth_reputation_v1_reputation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReputeServiceQueryResponse.ProtoReflect.Descriptor instead.
func (*ReputeServiceQueryResponse) Descriptor() ([]byte, []int) {
	return file_techaro_thoth_reputation_v1_reputation_proto_rawDescGZIP(), []int{2}
}

func (x *ReputeServiceQueryResponse) GetHasMatch() bool {
	if x != nil {
		return x.HasMatch
	}
	return false
}

func (x *ReputeServiceQueryResponse) GetIpLists() []*IPList {
	if x != nil {
		return x.IpLists
	}
	return nil
}

func (x *ReputeServiceQueryResponse) GetSuggestedChallenge() string {
	if x != nil {
		return x.SuggestedChallenge
	}
	return ""
}

func (x *ReputeServiceQueryResponse) GetAsnInfo() *v1.LookupResponse {
	if x != nil {
		return x.AsnInfo
	}
	return nil
}

var File_techaro_thoth_reputation_v1_reputation_proto protoreflect.FileDescriptor

const file_techaro_thoth_reputation_v1_reputation_proto_rawDesc = "" +
	"\n" +
	",techaro/thoth/reputation/v1/reputation.proto\x12\x1btecharo.thoth.reputation.v1\x1a\x1bbuf/validate/validate.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a&techaro/thoth/iptoasn/v1/iptoasn.proto\"e\n" +
	"\x06IPList\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"weight_mod\x18\x03 \x01(\x05R\tweightMod\x12\x18\n" +
	"\acomment\x18\x04 \x01(\tR\acomment\"\xe4\x02\n" +
	"\x19ReputeServiceQueryRequest\x12q\n" +
	"\n" +
	"ip_address\x18\x01 \x01(\tBR\xbaHO\xba\x01I\n" +
	"\x18ip_address.is_ip_address\x12 ip_address must be an IP address\x1a\vthis.isIp()\xc8\x01\x01R\tipAddress\x12l\n" +
	"\ffingerprints\x18\x02 \x03(\v2H.techaro.thoth.reputation.v1.ReputeServiceQueryRequest.FingerprintsEntryR\ffingerprints\x12%\n" +
	"\n" +
	"user_agent\x18\x03 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\tuserAgent\x1a?\n" +
	"\x11FingerprintsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xef\x01\n" +
	"\x1aReputeServiceQueryResponse\x12\x1b\n" +
	"\thas_match\x18\x01 \x01(\bR\bhasMatch\x12>\n" +
	"\bip_lists\x18\x02 \x03(\v2#.techaro.thoth.reputation.v1.IPListR\aipLists\x12/\n" +
	"\x13suggested_challenge\x18\x03 \x01(\tR\x12suggestedChallenge\x12C\n" +
	"\basn_info\x18\x04 \x01(\v2(.techaro.thoth.iptoasn.v1.LookupResponseR\aasnInfo2\x89\x01\n" +
	"\rReputeService\x12x\n" +
	"\x05Query\x126.techaro.thoth.reputation.v1.ReputeServiceQueryRequest\x1a7.techaro.thoth.reputation.v1.ReputeServiceQueryResponseB\x90\x02\n" +
	"\x1fcom.techaro.thoth.reputation.v1B\x0fReputationProtoP\x01ZMgithub.com/TecharoHQ/thoth-proto/gen/techaro/thoth/reputation/v1;reputationv1\xa2\x02\x03TTR\xaa\x02\x1bTecharo.Thoth.Reputation.V1\xca\x02\x1bTecharo\\Thoth\\Reputation\\V1\xe2\x02'Techaro\\Thoth\\Reputation\\V1\\GPBMetadata\xea\x02\x1eTecharo::Thoth::Reputation::V1b\x06proto3"

var (
	file_techaro_thoth_reputation_v1_reputation_proto_rawDescOnce sync.Once
	file_techaro_thoth_reputation_v1_reputation_proto_rawDescData []byte
)

func file_techaro_thoth_reputation_v1_reputation_proto_rawDescGZIP() []byte {
	file_techaro_thoth_reputation_v1_reputation_proto_rawDescOnce.Do(func() {
		file_techaro_thoth_reputation_v1_reputation_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_techaro_thoth_reputation_v1_reputation_proto_rawDesc), len(file_techaro_thoth_reputation_v1_reputation_proto_rawDesc)))
	})
	return file_techaro_thoth_reputation_v1_reputation_proto_rawDescData
}

var file_techaro_thoth_reputation_v1_reputation_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_techaro_thoth_reputation_v1_reputation_proto_goTypes = []any{
	(*IPList)(nil),                     // 0: techaro.thoth.reputation.v1.IPList
	(*ReputeServiceQueryRequest)(nil),  // 1: techaro.thoth.reputation.v1.ReputeServiceQueryRequest
	(*ReputeServiceQueryResponse)(nil), // 2: techaro.thoth.reputation.v1.ReputeServiceQueryResponse
	nil,                                // 3: techaro.thoth.reputation.v1.ReputeServiceQueryRequest.FingerprintsEntry
	(*v1.LookupResponse)(nil),          // 4: techaro.thoth.iptoasn.v1.LookupResponse
}
var file_techaro_thoth_reputation_v1_reputation_proto_depIdxs = []int32{
	3, // 0: techaro.thoth.reputation.v1.ReputeServiceQueryRequest.fingerprints:type_name -> techaro.thoth.reputation.v1.ReputeServiceQueryRequest.FingerprintsEntry
	0, // 1: techaro.thoth.reputation.v1.ReputeServiceQueryResponse.ip_lists:type_name -> techaro.thoth.reputation.v1.IPList
	4, // 2: techaro.thoth.reputation.v1.ReputeServiceQueryResponse.asn_info:type_name -> techaro.thoth.iptoasn.v1.LookupResponse
	1, // 3: techaro.thoth.reputation.v1.ReputeService.Query:input_type -> techaro.thoth.reputation.v1.ReputeServiceQueryRequest
	2, // 4: techaro.thoth.reputation.v1.ReputeService.Query:output_type -> techaro.thoth.reputation.v1.ReputeServiceQueryResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_techaro_thoth_reputation_v1_reputation_proto_init() }
func file_techaro_thoth_reputation_v1_reputation_proto_init() {
	if File_techaro_thoth_reputation_v1_reputation_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_techaro_thoth_reputation_v1_reputation_proto_rawDesc), len(file_techaro_thoth_reputation_v1_reputation_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_techaro_thoth_reputation_v1_reputation_proto_goTypes,
		DependencyIndexes: file_techaro_thoth_reputation_v1_reputation_proto_depIdxs,
		MessageInfos:      file_techaro_thoth_reputation_v1_reputation_proto_msgTypes,
	}.Build()
	File_techaro_thoth_reputation_v1_reputation_proto = out.File
	file_techaro_thoth_reputation_v1_reputation_proto_goTypes = nil
	file_techaro_thoth_reputation_v1_reputation_proto_depIdxs = nil
}
